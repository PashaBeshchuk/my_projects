<!DOCTYPE html>
<html>
	<head>
		<meta charset="utf-8">
		<title>Snake</title>
		<style>
			.foodForSnake{
				background:blue;
			}
			.paintSnakeBody{
				background:white;
			}
			.snakeDied{
				background:yellow;
			}
			tr{
				margin-bottom:0px;
				padding:0px;
			}
			table{
				border:1px solid black;
				border-spacing:0px;
				margin:auto;
				background:black;
			}
			
			@media screen and (min-width: 280px) and (max-width: 480px){
				td{
					width:5px;
					height:5px;
					margin:0px;
					padding:0px;
					
				}
			}
			
			@media screen and (min-width: 480px) and (max-width: 600px){
				td{
					width:8px;
					height:8px;
					margin:0px;
					padding:0px;
					
				}
			}
			@media screen and (min-width: 600px) and (max-width: 800px) {
				td{
					width:10px;
					height:10px;
					margin:0px;
					padding:0px;				
				}
			}
			@media screen and (min-width: 800px) and (max-width: 1000px) {
				td{
					width:12px;
					height:12px;
					margin:0px;
					padding:0px;				
				}
			}
			
			@media screen and (min-width: 1000px) {
				td{
					width:14px;
					height:14px;
					margin:0px;
					padding:0px;
				}
				
			}
			
		</style>
		
	</head>
	<body>

	<script>
		var numberOfLines = 4;
		var numberOfCellsPerLine = 6;
		var snakeDirectionLeft = 37;
		var snakeDirectionRight = 39;
		var snakeDirectionUp = 38;
		var snakeDirectionDow = 40;
		var keyCodeRightButton = snakeDirectionRight;
		var keyCodeLeftButton = snakeDirectionLeft;
		var keyCodeUpButton = snakeDirectionUp;
		var keyCodeDownButton = snakeDirectionDow;
		var cellsPerSecond = 1;
		var second = 1000;
		var keyCode;
		var foodPosition; 
		var allLinesOnField;
		var bodySnakePosition = [[numberOfLines/2,numberOfCellsPerLine/2]];;
		var headSnake;
		var snakeIsAlive = window.setInterval(tick, second/cellsPerSecond);
		var oldPositionSnake;
		var snakeLength = 2;
		
		window.addEventListener("keydown", saveKeyCode);
		buildField();
		buildBodyForSnake(snakeLength, bodySnakePosition);
		allLinesOnField = document.querySelectorAll("tr");
		paintSnakeBody(bodySnakePosition);
		
		function tick(){
			keyCodeRightButton = snakeDirectionRight;
			keyCodeLeftButton = snakeDirectionLeft;
			keyCodeUpButton = snakeDirectionUp;
			keyCodeDownButton = snakeDirectionDow;
			oldPositionSnake = bodySnakePosition.slice(0);
			var defaultSnakeCondition = [0,0];
			if(arraysEqual(defineStep(),defaultSnakeCondition)){
				return;
			}
			removeBodySnake(oldPositionSnake);
			var step = defineStep();
			headSnake = bodySnakePosition[0];
			headSnake = [headSnake[0] + step[0],headSnake[1] + step[1]];
			bodySnakePosition.unshift(headSnake);
			bodySnakePosition.pop();
			killSnake(oldPositionSnake);
			if(foodPosition == undefined){
				setPositionForFood();
				createFood();
			}
			paintSnakeBody(bodySnakePosition);
			if(arraysEqual(bodySnakePosition[0],foodPosition)){
				removeFood();
				bodySnakePosition.push(foodPosition);
				foodPosition = undefined;
			} 
		}
		
		function buildField(){
			var table  = document.createElement("table");
			document.body.appendChild(table);
						 
			for(var fieldLength  = 0; fieldLength < numberOfLines; fieldLength++){
				var line = document.createElement("tr");
				table.appendChild(line);
				
				 for(var fieldWidth = 0; fieldWidth < numberOfCellsPerLine; fieldWidth++){
					var cells = document.createElement("td");
					line.appendChild(cells);
				}				
			}
		}
		
		function getCell(variable){
			return allLinesOnField[variable[0]].childNodes[variable[1]];
		}
		 
		function paintSnakeBody(positionSnake){
			for(var numberSnakeBodyElement = 0; numberSnakeBodyElement < positionSnake.length; numberSnakeBodyElement++){
				getCell(positionSnake[numberSnakeBodyElement]).classList.add("paintSnakeBody");
			}
			
		}
		
		function saveKeyCode(e){
			if(e.keyCode == keyCodeRightButton || e.keyCode == keyCodeLeftButton || e.keyCode == keyCodeUpButton || e.keyCode == keyCodeDownButton){
				keyCode = e.keyCode;
			}
		}
		
		function removeBodySnake(positionSnake){
			for(var numberSnakeBodyElement = 0; numberSnakeBodyElement < positionSnake.length; numberSnakeBodyElement++){
				getCell(positionSnake[numberSnakeBodyElement]).classList.remove("paintSnakeBody");
			}
		}
				
		function defineStep(){ 
				switch(keyCode){
					case keyCodeRightButton:
						keyCodeLeftButton = undefined;
						return [0, 1];
					case keyCodeLeftButton:
						keyCodeRightButton = undefined;
						return [0,-1];
					case keyCodeUpButton:
						keyCodeDownButton = undefined;
						return [-1, 0];
					case keyCodeDownButton:
						keyCodeUpButton = undefined;
						return [1, 0];
					default:
						return [0,0];
				}
			}
			
		function setPositionForFood(){
			var suitableNumber = false;
			while(suitableNumber === false){
				suitableNumber = true;
				foodPosition = [
					(Math.floor(Math.random()*numberOfLines)),
					(Math.floor(Math.random()*numberOfCellsPerLine))
				];
				for(var numberSnakeBodyElement = 0; numberSnakeBodyElement < bodySnakePosition.length; numberSnakeBodyElement++){
					if(arraysEqual(bodySnakePosition[numberSnakeBodyElement],foodPosition)){
						suitableNumber = false;
						break;
					}
				}
			}
			return foodPosition;
		}		
		
		function buildBodyForSnake(lengthBody, SnakePosition){
			for(var tailNumberSnake = 1; tailNumberSnake < lengthBody; tailNumberSnake++){
				var mathClone = SnakePosition[0].slice(0);
					mathClone[1] = +mathClone[1] + tailNumberSnake;
					SnakePosition.push(mathClone);
			}
			return SnakePosition;
		}
		
		function killSnake(positionSnake){
			if(bodySnakePosition[0][0] == -1 || bodySnakePosition[0][1] == -1){
				paintedDeadSnake(positionSnake);
			}
			if(bodySnakePosition[0][0] == numberOfLines){
				paintedDeadSnake(positionSnake);
			}
			if(bodySnakePosition[0][1] == numberOfCellsPerLine){
				paintedDeadSnake(positionSnake);
			}
			for(var bodyElementSnake = 1; bodyElementSnake < bodySnakePosition.length; bodyElementSnake++){	
				if(arraysEqual(bodySnakePosition[0],bodySnakePosition[bodyElementSnake])){
					paintedDeadSnake(positionSnake);
				}
			}
		}
		
		function paintedDeadSnake(positionSnake){
			clearInterval(snakeIsAlive);
			for(var snakeBodyNumber = 0; snakeBodyNumber < positionSnake.length; snakeBodyNumber++){
				getCell(positionSnake[snakeBodyNumber]).classList.add("snakeDied");
			}
		}
		
		function arraysEqual(arrays,comparisonItem){
			return arrays.toString() === comparisonItem.toString();
		}
		
		function createFood(){
			getCell(foodPosition).classList.add("foodForSnake");
		}
		
		function removeFood(){
			getCell(bodySnakePosition[0]).classList.remove("foodForSnake");
		}
	</script>
	</body>
<html>
